1.)I loaded my csv file in Amazon s3 storage.

2.)In airbyte connected source to that amazon s3 storage where i kept the file and fetching data from there.

3.)In Airbyte set destination as postgres that i am using as a warehouse to store my data.

4.)Postgres i connected to metabase so that i can use metabase as visulization tool.

5.)I have written postgres query to Transform the data and for visulaization.

6.)Write queries to transform the two tables into one table having one row per message.
Query :-

WITH status_ranked AS (
    SELECT
        message_id,
        status,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY message_id ORDER BY timestamp DESC) AS rn
    FROM public."Noora_Statuses"
)
,
status_pivot AS (
    SELECT
        message_id,
        MAX(CASE WHEN rn = 1 THEN status END) AS status_1,
        MAX(CASE WHEN rn = 1 THEN timestamp END) AS timestamp_status_1,
        MAX(CASE WHEN rn = 2 THEN status END) AS status_2,
        MAX(CASE WHEN rn = 2 THEN timestamp END) AS timestamp_status_2,
        MAX(CASE WHEN rn = 3 THEN status END) AS status_3,
        MAX(CASE WHEN rn = 3 THEN timestamp END) AS timestamp_status_3,
        MAX(CASE WHEN rn = 4 THEN status END) AS status_4,
        MAX(CASE WHEN rn = 4 THEN timestamp END) AS timestamp_status_4,
        MAX(CASE WHEN rn = 5 THEN status END) AS status_5,
        MAX(CASE WHEN rn = 5 THEN timestamp END) AS timestamp_status_5,
		 MAX(CASE WHEN rn = 6 THEN status END) AS status_6,
        MAX(CASE WHEN rn = 6 THEN timestamp END) AS timestamp_status_6,
        MAX(CASE WHEN rn = 7 THEN status END) AS status_7,
        MAX(CASE WHEN rn = 7 THEN timestamp END) AS timestamp_status_7,
        MAX(CASE WHEN rn = 8 THEN status END) AS status_8,
        MAX(CASE WHEN rn = 8 THEN timestamp END) AS timestamp_status_8,
        MAX(CASE WHEN rn = 9 THEN status END) AS status_9,
        MAX(CASE WHEN rn = 9 THEN timestamp END) AS timestamp_status_9,
        MAX(CASE WHEN rn = 10 THEN status END) AS status_10,
        MAX(CASE WHEN rn = 10 THEN timestamp END) AS timestamp_status_10
    FROM status_ranked
    GROUP BY message_id
)
SELECT
    m.id,
    m.content,
    m.message_type,
    m.masked_addressees,
    m.masked_from_addr,
    m.direction,
    m.external_id,
    m.external_timestamp,
    m.is_deleted,
    sp.status_1,
    sp.timestamp_status_1,
    sp.status_2,
    sp.timestamp_status_2,
    sp.status_3,
    sp.timestamp_status_3,
    sp.status_4,
    sp.timestamp_status_4,
    sp.status_5,
    sp.timestamp_status_5,
	sp.status_6,
    sp.timestamp_status_6,
    sp.status_7,
    sp.timestamp_status_7,
    sp.status_8,
    sp.timestamp_status_8,
    sp.status_9,
    sp.timestamp_status_9,
    sp.status_10,
    sp.timestamp_status_10,
    sp.message_id as status_message_id,
    m.rendered_content,
    m.uuid,
    m.inserted_at,
    m.updated_at
FROM public."Noora_Messages" m
LEFT JOIN status_pivot sp ON m.id=sp.message_id;

Explanation steps:-
                 1.)ROW_NUMBER(): Assigns a rank to each status for each message_id, ordered by timestamp in descending order. The most recent status gets rn = 1, the second most recent rn = 2, and so on.

                 2.)PARTITION BY: Groups the rows by message_id to ensure that each message's statuses are ranked independently.

                 3.)Purpose Of status_pivot CTE statement: This section reshapes (pivots) the data to create separate columns for up to 10 statuses for each message_id.

                 4.)MAX(CASE...END): This expression is used to pick the status and timestamp based on the rank (rn). If rn = 1, it assigns the status and timestamp to status_1 and  timestamp_status_1, respectively. Similarly, it fills up to status_10.

                 5.)GROUP BY message_id: Aggregates data at the message_id level, ensuring one row per message with multiple columns for statuses and timestamps.

                 6.)Joining the Tables: Performs a LEFT JOIN between the Noora_Messages table (m) and the pivoted statuses table (status_pivot) using message_id.
                     LEFT JOIN: Ensures that all rows from Noora_Messages are included, even if they do not have corresponding statuses in the Noora_Statuses table.

                 7.)Selecting Columns:
                    From Noora_Messages (aliased as m): Selects columns like id, content, masked_addressees, etc.
                    From status_pivot (aliased as sp): Selects the pivoted status columns (status_1, status_2, ...) and their corresponding timestamps.
                    
                    8.)Summary
                    i.)Ranking Statuses: The query ranks each status for every message using ROW_NUMBER.
                    ii.)Pivoting: It then pivots these statuses into separate columns for up to 10 statuses.
                    iii.)Final Join: Finally, it joins the pivoted statuses with the messages table, resulting in a single row per message with multiple columns for the various statuses and their timestamps.


7.)Write a query to detect and flag duplicate records based on identical content and similar inserted_at timestamps

SELECT
    *,
    CASE
        WHEN COUNT(*) OVER (PARTITION BY content, DATE_TRUNC('minute', inserted_at)) > 1 THEN 1
        ELSE 0
    END AS is_duplicate
FROM
    public."Noora_Messages";
		
Explanation :- 
              1.) *: Selects all columns from the Noora_Messages table.
			  
              2.)Create New Column (is_duplicate) to flag duplicate record.
			  
              3.)CASE Statement: This creates a new column named is_duplicate.
			  
              4.)COUNT(*) OVER (PARTITION BY...): This is a window function that counts the number of rows with the same content and a truncated inserted_at timestamp (to the minute).
			  
              5.)DATE_TRUNC('minute', inserted_at): This function truncates the inserted_at timestamp to the nearest minute. This means messages are considered duplicates if they have identical content and were inserted within the same minute.
			  
              6.)WHEN COUNT(*) > 1: If there is more than one row with the same content and inserted_at (truncated to the minute), it indicates a duplicate. In this case, the CASE statement returns 1.
			  
              7.)ELSE 0: If there is only one such row, it is not considered a duplicate, so the CASE statement returns 0.
              
              8.)Summary:-
              i.)This query checks for duplicate messages in the Noora_Messages table by considering messages as duplicates if they have the same content and were inserted within the same minute.
              ii.)The is_duplicate column helps identify these duplicates, marking them with 1 for duplicates and 0 for unique entries.
              
8.)Include at least three additional data validation queries to check for consistency, quality, etc. of the data.


i.)Check for messages without statuses.

SELECT COUNT(*)
FROM public."Noora_Messages" m
LEFT JOIN public."Noora_Statuses" s ON m.id = s.message_id
WHERE s.id IS NULL;

Explanation :- We will check by this query and in that combined_table also that how many records with null value in status.message_id column if both the count are matching it means 
data is correct

ii.)Check for Unusual Timestamps:

SELECT count(*)
FROM public."Noora_Messages"
WHERE inserted_at > updated_at;

Explanation :-Here i am checking timestamp is correct or not if inserted_at>updated_at then it is unusual timestamp.

iii.)Check for statuses without corresponding messages
SELECT COUNT(*)
FROM public."Noora_Statuses" s
LEFT JOIN public."Noora_Messages" m ON s.message_id = m.id
WHERE m.id IS NULL;

Explanation:-This output will be zero because every status have atleast 1 message id then only data is valid.

iv.)Check for duplicate records in messages table

SELECT COUNT(*)
FROM (
    SELECT id, COUNT(*)
    FROM public."Noora_Messages"
    GROUP BY id
    HAVING COUNT(*) > 1
) AS duplicates;

Explanation :- In message table all the id should be unique because i am taking that as a primary key so i am validating that by this query it's output must be zero then only data is correct.

9.)Visualization

Q1.)The number of total and active users over time, for a selected time range (e.g., per week for the last 3 months). Total users are those that sent or received a message. Active users are those that send us a message (inbound)
Query:-

WITH weekly_user_data AS (
    SELECT
        DATE_TRUNC('week', inserted_at) AS week,
        masked_from_addr,
        MAX(CASE WHEN direction = 'inbound' THEN 1 ELSE 0 END) AS is_active_user,
        MAX(CASE WHEN direction IN ('inbound', 'outbound') THEN 1 ELSE 0 END) AS is_total_user
    FROM
       public."Noora_Messages"
    WHERE
        inserted_at >= NOW() - INTERVAL '6 months'  -- Filter for the last 6 months I am filtering for 6 months because there is no data for 3 months
    GROUP BY
        week,
        masked_from_addr
)
SELECT
    week,
    COUNT(DISTINCT CASE WHEN is_total_user = 1 THEN masked_from_addr END) AS total_users,
    COUNT(DISTINCT CASE WHEN is_active_user = 1 THEN masked_from_addr END) AS active_users
FROM
    weekly_user_data
GROUP BY
    week
ORDER BY
    week;

Explanation :- 
             Common Table Expression (CTE) - weekly_user_data:
			 Selects:
             A.) DATE_TRUNC('week', inserted_at) truncates the inserted_at timestamp to the beginning of the week.
             B.) masked_from_addr is used as the unique identifier for users.
             C.) MAX(CASE WHEN direction = 'inbound' THEN 1 ELSE 0 END) AS is_active_user checks if a user has sent a message (direction = 'inbound'). If true, it marks them as an active user (1).
             D.)MAX(CASE WHEN direction IN ('inbound', 'outbound') THEN 1 ELSE 0 END) AS is_total_user marks the user as total if they sent or received a message.
			 
             Filters: The date range is set to the last 3 months (inserted_at >= NOW() - INTERVAL '3 months')(As i don't have data for last 3 months that's why i am taking 6 months.
			 
			 Groups: By week and masked_from_addr to get user status per week.
			 
			 Final Select Statement:

              A.) week: Groups results by week.
              B.) total_users: Counts unique users (masked_from_addr) who are marked as is_total_user = 1.
              C.) active_users: Counts unique users (masked_from_addr) who are marked as is_active_user = 1.
              D.) GROUP BY week: Groups the final results by week.
              E.) ORDER BY week: Orders the results by week.
			  
             Summary:-
             i.)The CTE (weekly_user_data) calculates weekly data to identify if each user was "active" (sent a message) or "total" (sent or received a message) in that week.
             ii.)The main query then counts the number of total and active users per week based on this preprocessed data.
             iii.)The result is a table showing the number of total and active users for each week in the last 6 months.
             iv.)In the end I have execute this query on metabase and showing this data as line chart in metabase.
             

Q2.)The fraction of sent messages that are read, and the amount of time between when an outbound message is sent and when it is read Calculate the fraction of sent messages that are read and the time difference

Query:-

WITH message_status AS (
    SELECT
        m.id,
        MIN(CASE WHEN s.status = 'sent' THEN s.timestamp END) AS sent_time,
        MIN(CASE WHEN s.status = 'read' THEN s.timestamp END) AS read_time
    FROM
        public."Noora_Messages" m
    LEFT JOIN
        public."Noora_Statuses" s ON m.id = s.message_id
    WHERE
        m.direction = 'outbound' -- Only consider outbound messages
    GROUP BY
        m.id
)
SELECT
    COUNT(*) AS total_sent_messages,
    COUNT(read_time) AS total_read_messages,
    COUNT(read_time) * 1.0 / COUNT(*) AS read_fraction,
    AVG(EXTRACT(EPOCH FROM (read_time - sent_time)) / 60) AS avg_time_to_read_in_minutes
FROM
    message_status
WHERE
    sent_time IS NOT NULL; -- Ensure we only consider messages that were sent
	
Explanation :- 
             1.)Purpose: This CTE creates a summary of each outbound message, focusing on when it was sent and when it was read.

             2.)FROM: The public."Noora_Messages" table is joined with the public."Noora_Statuses" table using a LEFT JOIN to retrieve status information related to each message.

             3.)LEFT JOIN: This ensures that all messages are included in the results, even if they don't have a corresponding status entry in Noora_Statuses.
			 
			 4.)Where : This condition filters for outbound messages only.
			 
			 5.)MIN(CASE WHEN ... END):
			    i.)These expressions find the earliest (MIN) timestamp when a message was first marked as 'sent' and 'read'.
                ii.)sent_time: The timestamp of when the message was first marked as 'sent'.
                iii.)read_time: The timestamp of when the message was first marked as 'read'.
                iv.)MIN is used here in case there are multiple 'sent' or 'read' statuses for the same message, ensuring the earliest timestamp is selected.
				
			6.)GROUP BY:Groups the results by each message (m.id), producing one row per message.
			7.)COUNT(*) AS total_sent_messages:
               i.)Counts the total number of outbound messages that have a sent_time.
			   ii.)The WHERE clause (sent_time IS NOT NULL) ensures only messages with a recorded 'sent' status are included.

            8.)COUNT(read_time) AS total_read_messages:
               i.)Counts the number of messages that have a read_time (i.e., messages that were read).
               ii.)This counts only the messages where read_time is not NULL.

            9.)COUNT(read_time) * 1.0 / COUNT(*) AS read_fraction:
               i.)Calculates the fraction of sent messages that were read.
               ii.)COUNT(read_time) gives the number of read messages.
               iii.)COUNT(*) gives the total number of sent messages.
               iv.)Multiplying by 1.0 ensures the division returns a decimal (floating-point) result rather than an integer.
			   
             10.)AVG(EXTRACT(EPOCH FROM (read_time - sent_time)) / 60) AS avg_time_to_read_in_minutes:
                 i.)Calculates the average time it takes for a message to be read after being sent.
                 ii.)EXTRACT(EPOCH FROM (read_time - sent_time)) calculates the difference between read_time and sent_time in seconds.
                 iii.)Dividing by 60 converts the time difference from seconds to minutes.
                 iv.)AVG(...) computes the average of these time differences.
                 v.)WHERE sent_time IS NOT NULL:

Note :- Ensures only messages that have a sent_time are considered in the final calculation.This condition is crucial because it prevents the calculation from including messages that were never sent.

            Summary:-
            A.)Filter first only outbound messages.
            B.)Group by messaged.id to get one row per message.
            C.)Taking minimum of timestamp for status=sent and status=read it means taking earliest timestamp when a message was first sent and message was first read
            D.)calculating fraction and average by using this EXTRACT(EPOCH FROM (read_time - sent_time)) function.
            E.)Converting time interval into seconds.
            F.)In the end I have execute this query on metabase and showing this data as KPI CARD in metabase.
            
Q3.)The number of outbound messages in the last week by status, e.g., sent,delivered, read.

Query :-

SELECT
    s.status,
    COUNT(*) AS message_count
FROM
    public."Noora_Messages" m
	
JOIN 
    public."Noora_Statuses" s ON m.id=s.message_id
WHERE
    m.direction = 'outbound'
    AND m.inserted_at >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY
    s.status
ORDER BY
    message_count DESC;


Note :- I don't have data for current last week that's why i am taking some date in april month for visualization to show some chart

-- Query to count the number of outbound messages by status in the last week
SELECT
     s.status,
    COUNT(*) AS message_count
FROM
    public."Noora_Messages" m
	
JOIN 
    public."Noora_Statuses" s ON m.id=s.message_id
WHERE
    m.direction = 'outbound'
    AND m.inserted_at >= '2024-04-01'
    AND m.inserted_at < '2024-04-08'
GROUP BY
    s.status
ORDER BY
    message_count DESC;
	
Explanation :-
              1.)FROM: The main table is public."Noora_Messages" (m), which contains information about each message.
              2.)JOIN: This is an inner join with the public."Noora_Statuses" table (s), which contains the statuses associated with each message.
              3.)ON: The join condition m.id = s.message_id ensures that only messages with a corresponding status are included in the result set. If a message doesn't have a status, it will be excluded because this is an inner join.
			  4.)Where:
			    i.)m.direction = 'outbound': Filters to include only outbound messages, ignoring inbound messages.
                ii.)m.inserted_at >= CURRENT_DATE - INTERVAL '7 days':
                    A.)This condition ensures that only messages inserted within the last 7 days are included.
                    B.)CURRENT_DATE represents today's date, and subtracting an interval of 7 days gives the date exactly one week ago.
                    C.)This condition effectively filters the messages to those sent or recorded in the past week.
			 5.) SELECT:
			     i.)s.status: Selects the status of the messages. This field comes from the public."Noora_Statuses" table.
                 ii.)COUNT(*) AS message_count: Counts the number of messages for each status. The COUNT(*) function returns the number of rows for each group (status).
				 
			6.)GROUP BY:
			   i.)Groups the results by the status field.
               ii.)This means the COUNT(*) function will be applied separately to each unique status.
			   
			7.)Order By:
			   i.)Orders the results by the message_count in descending order.
               ii.)This means the status with the highest count of messages will appear first in the result set.
			   
            8.)Summary:-
             a.)Filters the data to include only outbound messages in the last 7 days.
             b.)Groups the messages by their status (e.g., "sent," "delivered," "read") and counts the number of messages for each status.
             c.)Outputs a result set where each row shows the status and the count of outbound messages with that status within the last week.
             d.)I execute this query on metabase and create visuals their by taking pie chart.
             